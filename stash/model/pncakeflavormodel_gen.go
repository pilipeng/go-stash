// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pnCakeFlavorFieldNames          = builder.RawFieldNames(&PnCakeFlavor{})
	pnCakeFlavorRows                = strings.Join(pnCakeFlavorFieldNames, ",")
	pnCakeFlavorRowsExpectAutoSet   = strings.Join(stringx.Remove(pnCakeFlavorFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	pnCakeFlavorRowsWithPlaceHolder = strings.Join(stringx.Remove(pnCakeFlavorFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	pnCakeFlavorModel interface {
		Insert(ctx context.Context, data *PnCakeFlavor) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PnCakeFlavor, error)
		Update(ctx context.Context, data *PnCakeFlavor) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPnCakeFlavorModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PnCakeFlavor struct {
		Id         int64  `db:"id"`          // 自增主键
		FlavorId   int64  `db:"flavor_id"`   // 口味id
		FlavorName string `db:"flavor_name"` // 口味名称
		SpuId      int64  `db:"spu_id"`      // 蛋糕spu_id
	}
)

func newPnCakeFlavorModel(conn sqlx.SqlConn) *defaultPnCakeFlavorModel {
	return &defaultPnCakeFlavorModel{
		conn:  conn,
		table: "`pn_cake_flavor`",
	}
}

func (m *defaultPnCakeFlavorModel) Insert(ctx context.Context, data *PnCakeFlavor) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, pnCakeFlavorRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FlavorId, data.FlavorName, data.SpuId)
	return ret, err
}

func (m *defaultPnCakeFlavorModel) FindOne(ctx context.Context, id int64) (*PnCakeFlavor, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnCakeFlavorRows, m.table)
	var resp PnCakeFlavor
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnCakeFlavorModel) Update(ctx context.Context, data *PnCakeFlavor) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pnCakeFlavorRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FlavorId, data.FlavorName, data.SpuId, data.Id)
	return err
}

func (m *defaultPnCakeFlavorModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPnCakeFlavorModel) tableName() string {
	return m.table
}
