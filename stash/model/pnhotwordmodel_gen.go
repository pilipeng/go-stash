// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pnHotWordFieldNames          = builder.RawFieldNames(&PnHotWord{})
	pnHotWordRows                = strings.Join(pnHotWordFieldNames, ",")
	pnHotWordRowsExpectAutoSet   = strings.Join(stringx.Remove(pnHotWordFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	pnHotWordRowsWithPlaceHolder = strings.Join(stringx.Remove(pnHotWordFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	pnHotWordModel interface {
		Insert(ctx context.Context, data *PnHotWord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PnHotWord, error)
		Update(ctx context.Context, data *PnHotWord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPnHotWordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PnHotWord struct {
		Id         int64  `db:"id" json:"id,string"`                   // 主键
		Tp         int64  `db:"type" json:"type,string"`                 // 应用页面 （1首页 2商城首页3 门票首页 4演出首页 5电影首页）
		Word       string `db:"word" json:"word,omitempty"`               // 热词
		RUrl       string `db:"r_url" json:"r_url,omitempty"`             // 跳转url
		SortNum    int64  `db:"sort_num" json:"sort_num,string"`       //  排序号 （倒序）
		IsShow     int64  `db:"is_show" json:"is_show,string"`         // 是否显示
		AddTime    int64  `db:"add_time" json:"add_time,string"`       // 添加时间
		UpdateTime int64  `db:"update_time" json:"update_time,string"` // 修改时间
	}
)

func newPnHotWordModel(conn sqlx.SqlConn) *defaultPnHotWordModel {
	return &defaultPnHotWordModel{
		conn:  conn,
		table: "`pn_hot_word`",
	}
}

func (m *defaultPnHotWordModel) Insert(ctx context.Context, data *PnHotWord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, pnHotWordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Tp, data.Word, data.RUrl, data.SortNum, data.IsShow, data.AddTime)
	return ret, err
}

func (m *defaultPnHotWordModel) FindOne(ctx context.Context, id int64) (*PnHotWord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnHotWordRows, m.table)
	var resp PnHotWord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnHotWordModel) Update(ctx context.Context, data *PnHotWord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pnHotWordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Tp, data.Word, data.RUrl, data.SortNum, data.IsShow, data.AddTime, data.Id)
	return err
}

func (m *defaultPnHotWordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPnHotWordModel) tableName() string {
	return m.table
}
