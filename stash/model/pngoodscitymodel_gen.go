// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pnGoodsCityFieldNames          = builder.RawFieldNames(&PnGoodsCity{})
	pnGoodsCityRows                = strings.Join(pnGoodsCityFieldNames, ",")
	pnGoodsCityRowsExpectAutoSet   = strings.Join(stringx.Remove(pnGoodsCityFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	pnGoodsCityRowsWithPlaceHolder = strings.Join(stringx.Remove(pnGoodsCityFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	pnGoodsCityModel interface {
		Insert(ctx context.Context, data *PnGoodsCity) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PnGoodsCity, error)
		Update(ctx context.Context, data *PnGoodsCity) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPnGoodsCityModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PnGoodsCity struct {
		Id         int64  `db:"id"`          // 自增主键
		SpuId      int64  `db:"spu_id"`      // 商品sku
		ZtCity     int64  `db:"zt_city"`     // 中台城市id
		CityCode   int64  `db:"city_code"`   // 城市编码
		RegionName string `db:"region_name"` // 地区名称
	}
)

func newPnGoodsCityModel(conn sqlx.SqlConn) *defaultPnGoodsCityModel {
	return &defaultPnGoodsCityModel{
		conn:  conn,
		table: "`pn_goods_city`",
	}
}

func (m *defaultPnGoodsCityModel) Insert(ctx context.Context, data *PnGoodsCity) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, pnGoodsCityRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SpuId, data.ZtCity, data.CityCode, data.RegionName)
	return ret, err
}

func (m *defaultPnGoodsCityModel) FindOne(ctx context.Context, id int64) (*PnGoodsCity, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnGoodsCityRows, m.table)
	var resp PnGoodsCity
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnGoodsCityModel) Update(ctx context.Context, data *PnGoodsCity) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pnGoodsCityRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SpuId, data.ZtCity, data.CityCode, data.RegionName, data.Id)
	return err
}

func (m *defaultPnGoodsCityModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPnGoodsCityModel) tableName() string {
	return m.table
}
