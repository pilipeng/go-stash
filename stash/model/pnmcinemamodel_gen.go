// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/kevwan/go-stash/stash/lib"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	pnMCinemaFieldNames          = builder.RawFieldNames(&PnMCinema{})
	pnMCinemaRows                = strings.Join(pnMCinemaFieldNames, ",")
	pnMCinemaRowsExpectAutoSet   = strings.Join(stringx.Remove(pnMCinemaFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	pnMCinemaRowsWithPlaceHolder = strings.Join(stringx.Remove(pnMCinemaFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	pnMCinemaModel interface {
		Insert(ctx context.Context, data *PnMCinema) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PnMCinema, error)
		FindOneByCinemaId(ctx context.Context, cinemaId int64) (*PnMCinema, error)
		Update(ctx context.Context, data *PnMCinema) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPnMCinemaModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PnMCinema struct {
		Id             int64        `db:"id" json:"id,string"`
		CinemaName     string       `db:"cinemaName" json:"cinemaName,omitempty"`          // 影院名称
		CityName       string       `db:"cityName" json:"cityName,omitempty"`              // 城市名称
		CinemaId       int64        `db:"cinemaId" json:"cinemaId,string"`              // 影院id
		SeatFlag       int64        `db:"seatFlag" json:"seatFlag,string"`              // 是否支持订座票  0：不支持 1：支持
		Region         string       `db:"region" json:"region,omitempty"`                   // 所在区
		Logo           string       `db:"logo" json:"logo,omitempty"`                       // 影院Logo图片
		Phone          string       `db:"phone" json:"phone,omitempty"`                     // 影院联系电话
		BusPath        string       `db:"busPath" json:"busPath,omitempty"`                // 公交线路
		CityId         int64        `db:"cityId" json:"cityId,string"`                  // 城市id
		SeatCounts     string       `db:"seatCounts" json:"seatCounts,omitempty"`          // 影院每个厅含座位数，多个用-分隔；未知数量为0
		HallId         string       `db:"hallId" json:"hallId,omitempty"`                  // 影院所含厅ID列表,多个厅用-分隔
		HallNames      string       `db:"hallNames" json:"hallNames,omitempty"`            // 影院厅名称列表，多个用-分隔
		AtmPosition    string       `db:"atmPosition" json:"atmPosition,omitempty"`        // 取票机
		BusinessCircle string       `db:"businessCircle" json:"businessCircle,omitempty"`  // 商圈
		Subway         string       `db:"subway" json:"subway,omitempty"`                   // 地铁
		Address        string       `db:"address" json:"address,omitempty"`                 // 影院地址
		TicketFlag     int64        `db:"ticketFlag" json:"ticketFlag,string"`          // 是否支持电子票  0：不支持 1：支持
		Longitude      string       `db:"longitude" json:"longitude,omitempty"`             // 径度
		Latitude       string       `db:"latitude" json:"latitude,omitempty"`               // 纬度
		Vipflags       string       `db:"vipflags" json:"vipflags,omitempty"`               // 影院所在厅是否为VIP厅，多个用-分隔，0表示非VIP，1为vip
		UpdateTime     lib.Datetime `db:"update_time" json:"update_time"`                   // 更新时间
		Are2DPrice     string       `db:"are2D_price" json:"are2D_price,omitempty"`       // 2D抵扣价
		Are3DPrice     string       `db:"are3D_price" json:"are3D_price,omitempty"`       // 3D抵扣价
		OnlineConsum   int64        `db:"online_consum" json:"online_consum,string"`     // 线上是否支持购买
		ProvinceSearch int64        `db:"province_search" json:"province_search,string"` // 省id  卡查询使用
		CitySearch     int64        `db:"city_search" json:"city_search,string"`         // 市id  卡查询使用
		AreaSearch     int64        `db:"area_search" json:"area_search,string"`         // 区id   卡查询
		Glasses        int64        `db:"glasses" json:"glasses,string"`                 // 是否提供3d眼镜
		ByCityId       int64        `db:"by_cityId" json:"by_cityId,string"`            // 博影城市id
		OnlineShow     int64        `db:"online_show" json:"online_show,string"`         // 线上是否显示
		PriceMultiple  string       `db:"price_multiple" json:"price_multiple,omitempty"`   // 此影院下排期倍数
		PriceBase      string       `db:"price_base" json:"price_base,omitempty"`           // 此影院下排期基数
		TimeCinemaId   int64        `db:"time_cinema_id" json:"time_cinema_id,string"`
		Code           int64        `db:"code" json:"code,string"`                 // 标识
		LocalCinema    int64        `db:"local_cinema" json:"local_cinema,string"` // 匹配影院id
		ZzCode         string       `db:"zz_code" json:"zz_code,omitempty"`           // 专资编码
	}
)

func newPnMCinemaModel(conn sqlx.SqlConn) *defaultPnMCinemaModel {
	return &defaultPnMCinemaModel{
		conn:  conn,
		table: "`pn_m_cinema`",
	}
}

func (m *defaultPnMCinemaModel) Insert(ctx context.Context, data *PnMCinema) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pnMCinemaRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CinemaName, data.CityName, data.CinemaId, data.SeatFlag, data.Region, data.Logo, data.Phone, data.BusPath, data.CityId, data.SeatCounts, data.HallId, data.HallNames, data.AtmPosition, data.BusinessCircle, data.Subway, data.Address, data.TicketFlag, data.Longitude, data.Latitude, data.Vipflags, data.Are2DPrice, data.Are3DPrice, data.OnlineConsum, data.ProvinceSearch, data.CitySearch, data.AreaSearch, data.Glasses, data.ByCityId, data.OnlineShow, data.PriceMultiple, data.PriceBase, data.TimeCinemaId, data.Code, data.LocalCinema, data.ZzCode)
	return ret, err
}

func (m *defaultPnMCinemaModel) FindOne(ctx context.Context, id int64) (*PnMCinema, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnMCinemaRows, m.table)
	var resp PnMCinema
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnMCinemaModel) FindOneByCinemaId(ctx context.Context, cinemaId int64) (*PnMCinema, error) {
	var resp PnMCinema
	query := fmt.Sprintf("select %s from %s where `cinemaId` = ? limit 1", pnMCinemaRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, cinemaId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnMCinemaModel) Update(ctx context.Context, data *PnMCinema) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pnMCinemaRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CinemaName, data.CityName, data.CinemaId, data.SeatFlag, data.Region, data.Logo, data.Phone, data.BusPath, data.CityId, data.SeatCounts, data.HallId, data.HallNames, data.AtmPosition, data.BusinessCircle, data.Subway, data.Address, data.TicketFlag, data.Longitude, data.Latitude, data.Vipflags, data.Are2DPrice, data.Are3DPrice, data.OnlineConsum, data.ProvinceSearch, data.CitySearch, data.AreaSearch, data.Glasses, data.ByCityId, data.OnlineShow, data.PriceMultiple, data.PriceBase, data.TimeCinemaId, data.Code, data.LocalCinema, data.ZzCode, data.Id)
	return err
}

func (m *defaultPnMCinemaModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPnMCinemaModel) tableName() string {
	return m.table
}
