// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/kevwan/go-stash/stash/lib"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	pnMFilmsFieldNames          = builder.RawFieldNames(&PnMFilms{})
	pnMFilmsRows                = strings.Join(pnMFilmsFieldNames, ",")
	pnMFilmsRowsExpectAutoSet   = strings.Join(stringx.Remove(pnMFilmsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	pnMFilmsRowsWithPlaceHolder = strings.Join(stringx.Remove(pnMFilmsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	pnMFilmsModel interface {
		Insert(ctx context.Context, data *PnMFilms) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PnMFilms, error)
		FindOneByFilmsId(ctx context.Context, filmsId int64) (*PnMFilms, error)
		FindOneById(ctx context.Context, id int64) (*PnMFilms, error)
		Update(ctx context.Context, data *PnMFilms) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPnMFilmsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PnMFilms struct {
		Id           int64          `db:"id"`
		FilmsId      int64          `db:"filmsId"`      // 影片id
		Name         string         `db:"name"`         // 电影名
		OsPicAddr    string         `db:"osPicAddr"`    // os远程图片
		PicAddr      string         `db:"picAddr"`      // 图片地址
		VideoUrl     string         `db:"videoUrl"`     // 电影预告片Id
		ShortInfo    string         `db:"shortInfo"`    // 电影一句话简介
		Dimensional  string         `db:"dimensional"`  // 电影维度类型： 例如：2D 3D IMAX
		Tp           string         `db:"type"`         // 影片类型，多个名字使用| 分隔类型：可为空
		Director     string         `db:"director"`     // 导演，多个名字使用| 分隔 类型可为空
		Info         string         `db:"info"`         // 电影描述，包含HTML格式数据类型
		ReleaseDate  string         `db:"releaseDate"`  // 电影首映日期
		Area         string         `db:"area"`         // 国家地区，多个名字使用|
		Company      string         `db:"company"`      // 发行公司
		Length       int64          `db:"length"`       // 片长，以分钟为单位类型
		Grade        float64        `db:"grade"`        // 电影评分
		Actors       string         `db:"actors"`       // 主演，多个名字使用|
		SaleCount    int64          `db:"saleCount"`    // 销售数量
		Language     string         `db:"language"`     // 语言，多个名字使用| 分隔类型可为空
		IsShow       int64          `db:"isShow"`       // 1：正在上映，2：即将上映
		Isrecommend  int64          `db:"isrecommend"`  // 是否推荐 1：推荐 2：不推荐
		Recommendimg string         `db:"recommendimg"` // 推荐图
		Deasc        int64          `db:"deasc"`
		UpdateTime   lib.Datetime      `db:"update_time"` // 更新时间
		DescCount    int64          `db:"desc_count"`
		Localfilm    int64          `db:"localfilm"` // 本地匹配字段
		Code         int64          `db:"code"`      // 标识
		UnionCode    string         `db:"unionCode"` // 广电总局统一编码
		AddTime      lib.JsonNullString `db:"add_time"`  // 添加时间
	}
)

func newPnMFilmsModel(conn sqlx.SqlConn) *defaultPnMFilmsModel {
	return &defaultPnMFilmsModel{
		conn:  conn,
		table: "`pn_m_films`",
	}
}

func (m *defaultPnMFilmsModel) Insert(ctx context.Context, data *PnMFilms) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pnMFilmsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FilmsId, data.Name, data.OsPicAddr, data.PicAddr, data.VideoUrl, data.ShortInfo, data.Dimensional, data.Tp, data.Director, data.Info, data.ReleaseDate, data.Area, data.Company, data.Length, data.Grade, data.Actors, data.SaleCount, data.Language, data.IsShow, data.Isrecommend, data.Recommendimg, data.Deasc, data.DescCount, data.Localfilm, data.Code, data.UnionCode, data.AddTime)
	return ret, err
}

func (m *defaultPnMFilmsModel) FindOne(ctx context.Context, id int64) (*PnMFilms, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnMFilmsRows, m.table)
	var resp PnMFilms
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnMFilmsModel) FindOneByFilmsId(ctx context.Context, filmsId int64) (*PnMFilms, error) {
	var resp PnMFilms
	query := fmt.Sprintf("select %s from %s where `filmsId` = ? limit 1", pnMFilmsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, filmsId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnMFilmsModel) FindOneById(ctx context.Context, id int64) (*PnMFilms, error) {
	var resp PnMFilms
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnMFilmsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnMFilmsModel) Update(ctx context.Context, data *PnMFilms) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pnMFilmsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FilmsId, data.Name, data.OsPicAddr, data.PicAddr, data.VideoUrl, data.ShortInfo, data.Dimensional, data.Tp, data.Director, data.Info, data.ReleaseDate, data.Area, data.Company, data.Length, data.Grade, data.Actors, data.SaleCount, data.Language, data.IsShow, data.Isrecommend, data.Recommendimg, data.Deasc, data.DescCount, data.Localfilm, data.Code, data.UnionCode, data.AddTime, data.Id)
	return err
}

func (m *defaultPnMFilmsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPnMFilmsModel) tableName() string {
	return m.table
}
