// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/kevwan/go-stash/stash/lib"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	pnScenicFieldNames          = builder.RawFieldNames(&PnScenic{})
	pnScenicRows                = strings.Join(pnScenicFieldNames, ",")
	pnScenicRowsExpectAutoSet   = strings.Join(stringx.Remove(pnScenicFieldNames, "`scenic_id`", "`create_time`", "`update_time`"), ",")
	pnScenicRowsWithPlaceHolder = strings.Join(stringx.Remove(pnScenicFieldNames, "`scenic_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	pnScenicModel interface {
		Insert(ctx context.Context, data *PnScenic) (sql.Result, error)
		FindOne(ctx context.Context, scenicId int64) (*PnScenic, error)
		FindOneById(ctx context.Context, id int64) (*PnScenic, error)
		Update(ctx context.Context, data *PnScenic) error
		Delete(ctx context.Context, scenicId int64) error
	}

	defaultPnScenicModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PnScenic struct {
		ScenicId         int64          `db:"scenic_id"`     // 自增id
		Id               int64          `db:"id"`            // 景点id
		Name             string         `db:"name"`          // 景点名称
		Address          string         `db:"address"`       // 景点地址
		CommentGrade     float64        `db:"comment_grade"` // 点评分（满分 5 分，小数点后 1 位）
		PmrRecommand     string         `db:"pmr_recommand"` // 产品经理推荐；一般用来描述景点的特色
		Star             int64          `db:"star"`          // 景区星级（最高 5，即 5A）
		MarketPrice      float64        `db:"market_price"`  // 市场价（人民币价格，精确至小数点后 2 位）
		Price            float64        `db:"price"`         // 分销价格（人民币价格，精确至小数点后 2 位）
		ThemeList        string         `db:"theme_list"`    // 主题列表如：1,2,3
		IsValid          int64          `db:"is_valid"`      // 有效性（根据返回参数判断）
		CtripPrice       float64        `db:"ctrip_price"`   // 携程卖价（人民币价格，精确至小数点后 2 位）
		ImageUrl         string         `db:"image_url"`     // 景点首图链接
		ImgList          string         `db:"img_list"`      // 图片列表，调用图片接口
		Url              string         `db:"url"`           // 景点详情页对应 URL
		OpenTimeDesc     string         `db:"open_time_desc"`
		FirstBookingDate int64          `db:"first_booking_date"` // 最早可预订日期
		Longitude        float64        `db:"longitude"`          // 经度（数据取自高德） 精确到小数点后六位
		Latitude         float64        `db:"latitude"`           // 纬度（数据取自高德）精确到小数点后六位
		UpdateTime       int64          `db:"update_time"`        // 更新时间
		IsShow           int64          `db:"is_show"`            // 是否显示
		RecommendSort    int64          `db:"recommend_sort"`     // 推荐排序
		CountryId        int64          `db:"country_id"`         // 国家id
		ProvinceId       int64          `db:"province_id"`        // 省id
		CityId           int64          `db:"city_id"`            // 城市id
		CityEname        string         `db:"city_ename"`         // 城市拼音
		CityInfo         string         `db:"city_info"`          // 城市信息
		InChina          int64          `db:"in_china"`           // 是否国内1:国内 2国外
		CityCode         int64          `db:"city_code"`          // 博弈城市id
		Test             lib.JsonNullString `db:"test"`               // test
	}
)

func newPnScenicModel(conn sqlx.SqlConn) *defaultPnScenicModel {
	return &defaultPnScenicModel{
		conn:  conn,
		table: "`pn_scenic`",
	}
}

func (m *defaultPnScenicModel) Insert(ctx context.Context, data *PnScenic) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pnScenicRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Address, data.CommentGrade, data.PmrRecommand, data.Star, data.MarketPrice, data.Price, data.ThemeList, data.IsValid, data.CtripPrice, data.ImageUrl, data.ImgList, data.Url, data.OpenTimeDesc, data.FirstBookingDate, data.Longitude, data.Latitude, data.IsShow, data.RecommendSort, data.CountryId, data.ProvinceId, data.CityId, data.CityEname, data.CityInfo, data.InChina, data.CityCode, data.Test)
	return ret, err
}

func (m *defaultPnScenicModel) FindOne(ctx context.Context, scenicId int64) (*PnScenic, error) {
	query := fmt.Sprintf("select %s from %s where `scenic_id` = ? limit 1", pnScenicRows, m.table)
	var resp PnScenic
	err := m.conn.QueryRowCtx(ctx, &resp, query, scenicId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnScenicModel) FindOneById(ctx context.Context, id int64) (*PnScenic, error) {
	var resp PnScenic
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnScenicRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnScenicModel) Update(ctx context.Context, data *PnScenic) error {
	query := fmt.Sprintf("update %s set %s where `scenic_id` = ?", m.table, pnScenicRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Address, data.CommentGrade, data.PmrRecommand, data.Star, data.MarketPrice, data.Price, data.ThemeList, data.IsValid, data.CtripPrice, data.ImageUrl, data.ImgList, data.Url, data.OpenTimeDesc, data.FirstBookingDate, data.Longitude, data.Latitude, data.IsShow, data.RecommendSort, data.CountryId, data.ProvinceId, data.CityId, data.CityEname, data.CityInfo, data.InChina, data.CityCode, data.Test, data.ScenicId)
	return err
}

func (m *defaultPnScenicModel) Delete(ctx context.Context, scenicId int64) error {
	query := fmt.Sprintf("delete from %s where `scenic_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, scenicId)
	return err
}

func (m *defaultPnScenicModel) tableName() string {
	return m.table
}
