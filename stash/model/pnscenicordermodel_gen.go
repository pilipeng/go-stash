// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/kevwan/go-stash/stash/lib"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
	"strings"
)

var (
	pnScenicOrderFieldNames          = builder.RawFieldNames(&PnScenicOrder{})
	pnScenicOrderRows                = strings.Join(pnScenicOrderFieldNames, ",")
	pnScenicOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(pnScenicOrderFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	pnScenicOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(pnScenicOrderFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	pnScenicOrderModel interface {
		Insert(ctx context.Context, data *PnScenicOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*PnScenicOrder, error)
		FindOneByOrderSn(ctx context.Context, orderSn string) (*PnScenicOrder, error)
		Update(ctx context.Context, data *PnScenicOrder) error
		Delete(ctx context.Context, id int64) error
	}

	defaultPnScenicOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	PnScenicOrder struct {
		Id                    int64          `db:"id"`                      // 自增主键
		OrderSn               string         `db:"order_sn"`                // 订单号
		CtripOrderSn          string         `db:"ctrip_order_sn"`          // 携程订单号
		UserId                int64          `db:"user_id"`                 // 用户id
		UserName              string         `db:"user_name"`               // 用户名（手机号）
		GoodsId               int64          `db:"goods_id"`                // 商品id
		GoodsName             string         `db:"goods_name"`              // 商品名称
		GoodsImg              string         `db:"goods_img"`               // 图片
		ResourceId            int64          `db:"resource_id"`             // 资源id
		ResourceName          string         `db:"resource_name"`           // 资源名称
		Count                 int64          `db:"count"`                   // 数量
		Amount                float64        `db:"amount"`                  // 总金额（分）组合价
		Price                 float64        `db:"price"`                   // 博影销售单价
		CtripPrice            float64        `db:"ctrip_price"`             // 携程价
		PurchaseTicketsName   string         `db:"purchase_tickets_name"`   // 购票人
		PurchaseTicketsMobile string         `db:"purchase_tickets_mobile"` // 购票人手机号
		PayType               int64          `db:"pay_type"`                // 支付方式 1微信 2支付宝
		OrderStatus           int64          `db:"order_status"`            //  0：未付款  1：已付款  2：已扣点未补差价 3：已退款（退卡退差价） 4：已退款（退卡未退差价）5:已取消6:已确认(第三方收到订单)|已付款   7: 已发码|已发货  8：已完成(虚拟，不存在)
		SendStatus            int64          `db:"send_status"`             // 信息发送状态 0：未发送  1：短信发送   2：微信发送 3：失败信息发送
		RefundDesc            string         `db:"refundDesc"`              // 退款描述
		OrderTime             int64          `db:"order_time"`              // 订单时间
		PayTime               int64          `db:"pay_time"`                // 支付时间
		PayCardNum            string         `db:"pay_card_num"`            // 支付卡号（多卡用逗号分隔）
		PayCardSport          string         `db:"pay_card_sport"`          // 支付点数/次数（多卡用逗号分隔）
		PayCardType           int64          `db:"pay_card_type"`           // 卡类型（一个订单只能使用同类型的卡）
		PayCardName           string         `db:"pay_card_name"`           // 卡名称（多卡用逗号分隔）
		PayCardMoney          float64        `db:"pay_card_money"`          // 卡总抵扣金额
		TransactionId         string         `db:"transaction_id"`          // 微信/支付宝 补差订单号
		SurplusMoney          float64        `db:"surplus_money"`           // 补差金额
		OrderMaizuoSn         string         `db:"order_maizuo_sn"`         // 卖座订单号
		IsBindingcardPay      int64          `db:"is_bindingcard_pay"`      // 是否绑定卡支付 0：否 1：是
		SmsSendStatus         int64          `db:"sms_send_status"`         // 短信发送状态 0：失败 1：成功
		WxSendStatus          int64          `db:"wx_send_status"`          // 微信发送状态 0：失败 1：成功
		PriceResponse         string         `db:"price_response"`          // 第三方初始价格
		OriginalPrice         int64          `db:"original_price"`          // 传给票务的价格
		CardResponse          string         `db:"card_response"`           // 卡支付信息
		OpenTimeDesc          lib.JsonNullString `db:"open_time_desc"`
		Venueaddress          string         `db:"venueaddress"`          // 场地地址
		SelectTimer           lib.Datetime      `db:"select_timer"`          // 选择时间
		ReceiverAddressInfo   string         `db:"receiver_address_info"` // 详细地址
		Platform              int64          `db:"platform"`              // 1:手机  2：PC
		PassengerInfoList     lib.JsonNullString `db:"passenger_info_list"`   // 携程旅客信息列表
		IsHide                int64          `db:"is_hide"`               // 是否删除 1已删除 0正常
		ThirdOrderInfo        string         `db:"third_order_info"`      // 第三方订单信息(  ProductUseMsg 产品设置使用方法（入园使用方法，如使用 身份证、携程订单号入园）VendorVoucher 供应商凭证（所有入园凭证拼接）(凭证码：136090505574，电子票：https://t.ctrip.cn/?GTWQmyG/kW8z 。)ImageShortUrl 二维码短链VoucherFileUrl 文件凭证链接VoucherNO  凭证码VoucherCode //二维码辅助码AdmissionCertificate 入园凭证(数字凭证码)ImageUrl //二维码图片地址 二维码优先展示此数据)
		ThirdOrderStatus      int64          `db:"third_order_status"`    // 携程订单状态订单状态：0:已提交（分销无该状态） 1:确认中 2:已确认（和供应商确认资源） 3:待付款（分销无该状态） 4:已付款 5:成交(部分退) 6:退订（用户已付款取消）7:成交 8:取消（用户未付款取消，分销无该状态）9:取消中（分销无该状态） 10:退订中订单若无退订，订单最终状态为：成交
		ThirdOrderId          int64          `db:"third_order_id"`        // 携程订单id
		WxResponse            lib.JsonNullString `db:"wx_response"`           // 微信回调信息
		OrderNote             string         `db:"order_note"`            // 订单备注
	}
)

func newPnScenicOrderModel(conn sqlx.SqlConn) *defaultPnScenicOrderModel {
	return &defaultPnScenicOrderModel{
		conn:  conn,
		table: "`pn_scenic_order`",
	}
}

func (m *defaultPnScenicOrderModel) Insert(ctx context.Context, data *PnScenicOrder) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, pnScenicOrderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrderSn, data.CtripOrderSn, data.UserId, data.UserName, data.GoodsId, data.GoodsName, data.GoodsImg, data.ResourceId, data.ResourceName, data.Count, data.Amount, data.Price, data.CtripPrice, data.PurchaseTicketsName, data.PurchaseTicketsMobile, data.PayType, data.OrderStatus, data.SendStatus, data.RefundDesc, data.OrderTime, data.PayTime, data.PayCardNum, data.PayCardSport, data.PayCardType, data.PayCardName, data.PayCardMoney, data.TransactionId, data.SurplusMoney, data.OrderMaizuoSn, data.IsBindingcardPay, data.SmsSendStatus, data.WxSendStatus, data.PriceResponse, data.OriginalPrice, data.CardResponse, data.OpenTimeDesc, data.Venueaddress, data.SelectTimer, data.ReceiverAddressInfo, data.Platform, data.PassengerInfoList, data.IsHide, data.ThirdOrderInfo, data.ThirdOrderStatus, data.ThirdOrderId, data.WxResponse, data.OrderNote)
	return ret, err
}

func (m *defaultPnScenicOrderModel) FindOne(ctx context.Context, id int64) (*PnScenicOrder, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", pnScenicOrderRows, m.table)
	var resp PnScenicOrder
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnScenicOrderModel) FindOneByOrderSn(ctx context.Context, orderSn string) (*PnScenicOrder, error) {
	var resp PnScenicOrder
	query := fmt.Sprintf("select %s from %s where `order_sn` = ? limit 1", pnScenicOrderRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, orderSn)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultPnScenicOrderModel) Update(ctx context.Context, data *PnScenicOrder) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, pnScenicOrderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.OrderSn, data.CtripOrderSn, data.UserId, data.UserName, data.GoodsId, data.GoodsName, data.GoodsImg, data.ResourceId, data.ResourceName, data.Count, data.Amount, data.Price, data.CtripPrice, data.PurchaseTicketsName, data.PurchaseTicketsMobile, data.PayType, data.OrderStatus, data.SendStatus, data.RefundDesc, data.OrderTime, data.PayTime, data.PayCardNum, data.PayCardSport, data.PayCardType, data.PayCardName, data.PayCardMoney, data.TransactionId, data.SurplusMoney, data.OrderMaizuoSn, data.IsBindingcardPay, data.SmsSendStatus, data.WxSendStatus, data.PriceResponse, data.OriginalPrice, data.CardResponse, data.OpenTimeDesc, data.Venueaddress, data.SelectTimer, data.ReceiverAddressInfo, data.Platform, data.PassengerInfoList, data.IsHide, data.ThirdOrderInfo, data.ThirdOrderStatus, data.ThirdOrderId, data.WxResponse, data.OrderNote, data.Id)
	return err
}

func (m *defaultPnScenicOrderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultPnScenicOrderModel) tableName() string {
	return m.table
}
